plugins {
    id "org.jetbrains.kotlin.plugin.serialization" version "$kotlin_version"
}

apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
apply plugin: 'kotlin-parcelize'
apply plugin: 'org.mozilla.rust-android-gradle.rust-android'
apply plugin: 'maven-publish'
apply plugin: 'pl.allegro.tech.build.axion-release'
apply plugin: "org.sonarqube"

sonarqube {
    properties {
        property "sonar.projectName", "arklib-android"
        property "sonar.projectKey", "ARK-Builders_arklib-android"
        property "sonar.organization", "ark-builders"
        property "sonar.host.url", "https://sonarcloud.io"
    }
}
android {
    compileSdkVersion 34
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    defaultConfig {
        minSdkVersion 26
        targetSdkVersion 34
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    publishing {
        singleVariant('release') {
            withSourcesJar()
        }
        singleVariant('debug') {
            withSourcesJar()
        }
    }
    ndkVersion "25.2.9519653"
    namespace "dev.arkbuilders.arklib"
}

cargo {
    module = "../arklib"
    libname = "arklib"
    targets = ["arm64", "x86", "x86_64", "arm"]
    // speed up local build
    // targets = ["arm64"]
    prebuiltToolchains = true
    // Set to "debug" to enable logging. Or "release" to make a production build.
    // https://github.com/mozilla/rust-android-gradle/issues/38
    profile = gradle.startParameter.taskNames.any { it.toLowerCase().contains("debug") } ? "debug" : "release"
}

dependencies {
    implementation fileTree(dir: "libs", include: ["*.jar"])
    implementation 'dev.arkbuilders:arkfilepicker:0.1.1'

    implementation 'androidx.core:core-ktx:1.7.0'
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation "org.jetbrains.kotlinx:kotlinx-serialization-json:1.3.3"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:1.6.4"
    implementation 'org.apache.tika:tika-core:2.4.0'
    implementation "com.google.dagger:dagger:2.41"
    implementation 'com.davemorrissey.labs:subsampling-scale-image-view-androidx:3.10.0'
    implementation 'com.github.wseemann:FFmpegMediaMetadataRetriever:1.0.14'

    def coilVersion = "2.4.0"
    implementation "io.coil-kt:coil:$coilVersion"
    implementation "io.coil-kt:coil-gif:$coilVersion"
    implementation "io.coil-kt:coil-svg:$coilVersion"
    implementation "io.coil-kt:coil-video:$coilVersion"

    testImplementation "junit:junit:4.13.2"
    testImplementation 'org.jetbrains.kotlinx:kotlinx-coroutines-test:1.7.3'
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:1.6.4"

    testImplementation "io.mockk:mockk:1.13.7"
}

tasks.whenTaskAdded { task ->
    if ((task.name == 'mergeDebugJniLibFolders' || task.name == 'mergeReleaseJniLibFolders')) {
        task.dependsOn 'cargoBuild'
    }
}

//For local development:
//def libVersion = '999'
def libVersion = scmVersion.version

publishing {
    publications {
        release(MavenPublication) {
            groupId = "dev.arkbuilders"
            artifactId = "arklib"
            version = libVersion
            afterEvaluate {
                from components.release
            }
        }
        debug(MavenPublication) {
            groupId = "dev.arkbuilders"
            artifactId = "arklib-debug"
            version = libVersion
            afterEvaluate {
                from components.debug
            }
        }
    }

    repositories {
        maven {
            name = "GithubPackages"
            url = "https://maven.pkg.github.com/ARK-Builders/arklib-android"
            credentials {
                username = System.getenv("GITHUB_ACTOR")
                password = System.getenv("GITHUB_TOKEN")
            }
        }

    }
}

tasks.withType(Test) {
    systemProperty "java.library.path", rootDir
}

task buildRustLibForHost(type: Exec) {
    standardOutput = new ByteArrayOutputStream()
    commandLine 'sh', '../scripts/buildRustLibForHost.sh'
    doLast {
        println "Output: $standardOutput"
    }
}

afterEvaluate {
    testDebugUnitTest.dependsOn buildRustLibForHost
}
